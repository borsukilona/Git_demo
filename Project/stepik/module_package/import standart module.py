#import math as mt #добавили модулю псевдоним, чтобы потом использовать его в качестве имени модуля
from time import time #чтобы не импортировать модуль целиком (все его функции могут просто не понадобится), мы пропишем нужные нам функции и импортируем только их
#можем давать псевдоним и функциям, не только модулям (from time import time as tm) - print(tm())
import pprint

from stepik.folder_for_mymodule2 import mymodule2

pprint.pprint(locals()) #отображает красиво локальные переменные

#импорт модуля создает в программе пространство имен, к которым мы можем обращаться (и которые находятся внутри модуля)

#math = 'mathematics' #теперь math это строка, а не модуль
#a = mt.ceil(1.8) #mt - мы обращаемся в модулю по псевдониму (к пространству имен), а далее вызываем уже нужную функцию модуля
#print(a) #2

#https://docs.python.org/3/library/ библиотека стандартных модулей

t = time() #нам уже не надо обращаться к имени модуля, мы можем вызвать только его функцию (когда мы частично импортировали модуль с конкретной функцией)
print(t) #1675012819.7490034

# ----------------------------------------------------------
#создаем и импортируем свой собственный модуль
import mymodule #модуль находится в нашей директории
#from mymodule floor

print(mymodule.floor(2))
# function floor from mymodule
# 2

a = mymodule.math.floor(-5.6) #-6 вызываем модуль, который находится внутри основного модуля
print(a)

import stepik.folder_for_mymodule2.mymodule2 #модуль находится в другой директории

print(mymodule2.floor(3))
# function floor from mymodule2
# 3


#если мы хотим выполнить импорт модуля второй раз (повторно)
import importlib
importlib.reload(mymodule)

# ----------------------------------------------------------
#установка стороних модулей/покетов

'''
NapPy - многомерные массивы
Matplotlib - графики

PyGame - 2d графика

Flask - простой фреймворк для сайтов
Django - сложный фреймворк для сложных сайтов
'''

#какие сторонние пакеты уже установлены -> pip list (в терминале ввести (тут или в cmd))
#установка модуля -> pip install package_name (flask)
#установка определеной версии определенного модуля -> pip install package_name==version (flask==1.1.2)
#какие пакеты есть: https://pypi.org/
#найти и установить пакет прямо в PyCharm -> File - Settings - Project: Python - Python Interpreter - выбрать версию интерпретатора - +

'''
установка внешних модулей -> pip install -r text_file_name (внутри файла с именем text_file_name будет имя и версия пакета (wxPython==4.1.0))
обычно в этом текстовом файле пишется прям список всех установленных пакетов и ивверсий, которые мы хотим перенести из одного места в другое
(если мы переносим проект, например)

pip freeze > requirements.txt 
в рабочем каталоге создается текстовый файл со всеми установленными модулями и их версиями (не надо вручную самумому создавать этот файл)
'''



