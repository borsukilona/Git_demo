abs(-5)  # отрицательные числа в положительные
min(1, 9, 8, -1)  # минимальное число
max(1, 9, 8, -1)  # максимальное число
pow(4, 2)  # возводит первое число в степень (второе число); тоже самое что и 4**2
round(1.4)  # округляет (0.5 может округлять в разные стороны, надо иметь ввиду)
round(7.878787, 2)  # откругляем до знака после запятой (второй аргумент, тут 2, значит до сотых)

import math

math.ceil(5.2)  # округляем до наибольшего целого (будет 6)
math.floor(5.2)  # округляем до наименьшего целого (будет 5)
math.factorial(6)  # факториал значит, что мы умножаем каждое число на каждое последующее (1*2*3*4*5*6 = 720)
math.trunc(4.5)  # отбрасывает дробную часть
int(4.5)  # аналог math.trunc
math.sqrt(49)  # корень квадратный числа
math.pi  # число ПИ
math.e  # число E
math.prod([1, 2, 3]) # 6 перемножить элементы списка

# a,b = map(float, input().split())

a = "one"

"ha" * 5  # hahahahaha
str(5)  # преобразование в строку
len(a)  # количество символов в строке
"ne" in a  # присутствует ли фрагмент в строке
a == "one"  # проверка на равенство строк
a != "two"  # проверка на НЕравенство строк
"кот" > "кит"  # что больше -> True -> буква 'И' идет по алфавиту раньше, чем буква 'О' ('О' больше 'И')
"Кот" < "кот"  # True -> заглавные символы идут ло малыъ символов; коды малых мукв БОЛЬШЕ кодов заглавных букв
ord("K")  # узнать код символа

a(len(a) - 1)  # найти последний символ
a[-1]  # найти последний символ
a[-2]  # найти ПРЕДпоследний символ
a[0:2]  # вырезаем кусок строки; 2 не учитывается (символы от 0 до 1цы будут включительно)
a[:2]  # от 0 до 1ого включительно
a[2:]  # от 2ого до конца
s = a[:]  # объект (строка) не копируется, а дублируется во второуб переменную -> обе переменные ссылаются на один и тот же обьект!
a[0:2:2]  # начальный индекс : конечный индекс : шаг перебора этих символов (шаг 2 -> через букву)
a[0::2]  # от 0 символа через букву
a[::2]  # все символы через букву
a[::-1]  # все символы с конца в начало (все написано наоборот будет "one" -> "eno")
a[::-2]  # все символы с конца в начало ЧЕРЕЗ букву

s = 'python'
s1 = 'Python'
s2 = 'hello world'

s.upper()  # 'PYTHON'
s1.lower()  # 'python'

s2.title() # 'Hello World' каждое слово с большой буквы
s2.swapcase() # 'HELLO WORLD' меняем текущий регистр
s2.capitalize() # 'Hello world' предложение с большой буквы делает (только первое слово)

s.count("py")  # сколько раз в строке повторяется частичка 'py' -> 1
s.count("th", 1, 4)  # сколько раз в строке 'yth' (c 1ого по 3ий символ включительно) повторяется частичка 'py' -> 1

s.find("py")  # первое вхождение подстроки в строке (индекс) -> 0 (p имеет индекс 0)
s.find("th", 1, 4)  # первое вхождение подстроки в строке 'yth' (c 1ого по 3ий символ включительно) (индекс) -> 2 (t имеет индекс 2)
s.rfind("py")  # аналогичный методy find, только ищет с конца строки
s.index("py")  # аналогичный методy find, но если указать несуществующую подстроку, то выдаст ошибку; find даст -1

s.replace("y", "a")  # 'pathon'
s.replace("y", "")  # 'pthon'
s.replace("y", "a", 2)  # определяем кол-во букв, которые будем менять на "а" (первые две "y" меняем на "а")

s.isalpha()  # true - если строка полностью состоит из букв; false - если неть
'hello world'.isalpha()  # false, ибо есть пробел
s.isdigit()  # true - если строка полностью состоит из цифр; false - если неть
'5.6'.isdigit()  # false, ибо есть точка, '-' тоже не цифра
'5'.isdigit()  # true

s.rjust(7)  # добавляет по-умолчанию пробелмы вначале строки, чтобы было заданое кол-во символов в целом -> ' python'
s.rjust(7, "j")  # 'jpython'; можно указать только ОДИН символ-заполнитель
s.ljust(7, "j")  # тоже самое что rjust, только добавляет символы сконца строки -> 'pythonj'

"ilona borsuk".split(" ")  # разбиваем строку на несколько строк (конкретно тут ориентация на пробел между словами) -> на выходе СПИСОК -> ['ilona', 'borsuk']
d = '1  ,2,3, 4,   5,6'
l = d.replace(" ", "").split(",")  # ['1', '2', '3', '4', '5', '6']
",".join(l) #'1,2,3,4,5,6' // соединяет эелементы списка в одну строку (вначале указывает как будем соединять, тут через запятую)

fio = "ilona borsuk"
",".join(fio.split()) # 'ilona,borsuk' //сначала мы разделили строку на список строк, а потом мы объединили обратно список через символ ","

"   fio   ".strip() # удаляет пробелы и переносы строк вначале и в конце -> 'fio'
"   fio   ".rstrip() # '   fio'
"   fio   ".lstrip() # 'fio   '

s3 = '1, 2, 3, 4'
s3.split(",", maxsplit=2) # ['1', ' 2', ' 3, 4'] maxsplit указывает сколько элементов разделять между собой (тут только 2 разделили)

t = "\tpanda" #\t табуляция - отступ -> "	panda"
t = r"D:\Python\Project\stepik\ex1.py" #raw-строки - все символы воспринимаются так, как они записаны -> "D:\Python\Project\stepik\ex1.py"
t = r"D:\\Python\\Project\\stepik\\ex1.py" #"D:\Python\Project\stepik\ex1.py"

age = 18
name = "Ilona"
f"my name is {name}, i an {18} and i love python" #'my name is Ilona, i an 18 and i love python'
f"my name is {name.upper()}, i an {18+6} and i love python" #'my name is ILONA, i an 24 and i love python'
"my name is {0}, i an {1} and i love python".format(name, age) #'my name is Ilona, i an 18 and i love python'
"my name is {fio}, i an {old} and i love python".format(fio=name, old=age) #'my name is Ilona, i an 18 and i love python', прописываем ключ в фигурных скобках

#------------------------


marks = [2,3,4,5]
marks[0] #2
marks[-1] #5
marks[0]=3 #[3, 3, 4, 5] замена эелемента в списке

lst = [] #пустой список
lst = list() #пустой список
list("python") #['p', 'y', 't', 'h', 'o', 'n']

len(marks) #4 кол=во элементов в списке
min(marks) #2
max(marks) #5
sum(marks) #14 сумма элементов списка

t = [4,3,5,1,7]
sorted(t) #[1, 3, 4, 5, 7]
sorted(t, reverse = True) #[7, 5, 4, 3, 1]

[1, 2, 3] + [4, 5] #[1, 2, 3, 4, 5]
["I", "love", "python"] * 3 #['I', 'love', 'python', 'I', 'love', 'python', 'I', 'love', 'python']
["i"] + ["love"] * 2 + ["python"] #['i', 'love', 'love', 'python']

s = [1, 2, 4, 5, 6]
5 in s #True сходит ли элемент в список
7 in s #False
del s[0] #[2, 4, 5, 6] удаляем элемент списка

lst = s[2:4] #[4, 5] выделить часть списка, как со строками и элементами
s[::-1] #[6, 5, 4, 2, 1] элементы списка в обратном порядке
s[::-2] #[6, 4, 1] с конца через 1
s[0:2] = ["ok", "no"] #['ok', 'no', 4, 5, 6] замена частей списка

[10, 2, 3] > [1, 2, 3] #True оно поверяет первые элементы списка, 10>1, и все, дальше проверка прекращается
# ещё больше будет тот список, у которого больше элементов
# не будут сравниваться разные типы данных элементов списков (число со строкой не будет сравнивать)

a = [1, -54, 3, 23, 43, -45, 0]
a.append(100) #[1, -54, 3, 23, 43, -45, 0, 100] добавить в список элемент, только один элемент
a.insert(3,-1000) #[1, -54, 3, -1000, 23, 43, -45, 0] вставить элемент внутрь списка перед элементом (тут: с индексом [3])
a.remove(1) #[-54, 3, 23, 43, -45, 0] удаляем элемент из списка (первое вхождение этого элемента)
a.pop() #удаляем последний элементс писка и возвращает ЗНАЧЕНИЕ этого последнего элемента (т.е. мы может удалить последний элемент и запомнить его)
a.pop(1) #удаляем элемент по индексу этого элемента (тут с индексом [1]) + возвращает ЗНАЧЕНИЕ этого элемента
a.clear() #удаляет все элементы списка, чистит весь список
b = a.copy() #создает копию списка, a и b - теперь разные списки (тоже самое можно сделать -> b = a[:] / b = list(a))
a.count(23) #сколько раз повторяется заданный элемент в списке
a.index(23) #возвращает индекс заданного элемента (первого его вхождения)
a.index(23, 4) #если одинаковых эелементов несколько, то можно указать вторым числом индекс, с которого начнем искать элемент (ищем индекс числа 23 из списка, начиная с 4ого индекса)
a.reverse() #[0, -45, 43, 23, 3, -54, 1] элементы списка в обратном порядке
a.sort() #[-54, -45, 0, 1, 3, 23, 43] по возрастанию (от min до max)
a.sort(reverse=True) #[43, 23, 3, 1, 0, -45, -54] по убыванию (от max до min)
#b = sorted(a) - b будет содержать копию списка а, только отсортированную
#a.sort() - не возвращает никакого списка нового, а просто сортирает, так что не надо делать b = a.sort(), ибо ничего не будет

line = [1,7,6,11,3]
img = [line[:], line[:], line[:], line[:], line[:]] #5 списков line внутри списка img
img[0] #[1, 7, 6, 11, 3]
img[0][0] #1
img[1] = [0,0,0,0,0] #[[1, 7, 6, 11, 3], [0, 0, 0, 0, 0], [1, 7, 6, 11, 3], [1, 7, 6, 11, 3], [1, 7, 6, 11, 3]] замена элемента внутри списка (списка на список)
img[1] = [0]*5 #тоже самое, что img[1] = [0,0,0,0,0] замена элемента внутри списка (списка на список)
img[1][:] = [1]*5 #[[1, 7, 6, 11, 3], [1, 1, 1, 1, 1], [1, 7, 6, 11, 3], [1, 7, 6, 11, 3], [1, 7, 6, 11, 3]] замена элемента внутри списка (списка на список)
#img[1] = [0]*5 удалит старый список и создаст новый
#img[1][:] = [1]*5 не удаляет никакие списки, а проводит замену элементов в существующем списке

lst1 = [1, 2, 3]
lst2 = ['a', 'b', 'c']
lst1.extend(lst2)
print(lst1) # [1, 2, 3, 'a', 'b', 'c'] "расширили" первый списко вторым и первый список изменился теперь

