#итератор, который преобразовывает по одному каждое значение в нужный нам тип

b = map(int, ["1", "2", "3"])
# a = (int(x) for x in ["1", "2", "3"]) посути этот генератор делает тоже самое, что и map()

'''
print(next(b)) # 1
print(next(b)) # 2
print(next(b)) # 3
'''

'''
for el in b:
    print(el, end=" ")
# 1 2 3
'''

# пройтись по коллекции map можно только один раз (как и с генератором такая же фишка)
print(sum(b)) # 6
print(sum(b)) # 0

# -------------------------------------------------------------------------------------------
def symbols(x):
    return list(x.lower())


cities = ["Москва", "Астрахань", "Самара", "Уфа", "Смоленск", "Тверь"]

# вернуть длину названий городов
l = map(len, cities)
print(list(l)) # [6, 9, 6, 3, 8, 5]

# большими буквами
u = map(str.upper, cities)
print(list(u)) # ['МОСКВА', 'АСТРАХАНЬ', 'САМАРА', 'УФА', 'СМОЛЕНСК', 'ТВЕРЬ']

symb = map(symbols, cities)
# symb = map(lambda s: list(s.lower()), cities)
print(list(symb))
# [['м', 'о', 'с', 'к', 'в', 'а'],
# ['а', 'с', 'т', 'р', 'а', 'х', 'а', 'н', 'ь'],
# ['с', 'а', 'м', 'а', 'р', 'а'],
# ['у', 'ф', 'а'],
# ['с', 'м', 'о', 'л', 'е', 'н', 'с', 'к'],
# ['т', 'в', 'е', 'р', 'ь']]

#слова задом-наперед
s = map(lambda s: s[::-1], cities)
print(list(s))
# ['авксоМ', 'ьнахартсА', 'арамаС', 'афУ', 'кснеломС', 'ьревТ']


def integ(x):
    return list(map(int, x.split()))


lst = ['8 11 -5', '3 4 10', '-1 -2 3', '4 5 6']
lst2D = list(map(integ, lst))
print(lst2D)
# [[8, 11, -5], [3, 4, 10], [-1, -2, 3], [4, 5, 6]]


def kort(s):
    return tuple(map(str, s.split("=")))


sp = ['house=дом', 'car=машина', 'men=человек', 'tree=дерево']
tp = tuple(map(kort, sp))
print(tp)
# (('house', 'дом'), ('car', 'машина'), ('men', 'человек'), ('tree', 'дерево'))